// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DataAccess.Models.ActorInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("Addtime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("addtime");

                    b.Property<string>("Birthday")
                        .HasColumnType("TEXT")
                        .HasColumnName("birthday");

                    b.Property<string>("BlogUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("blog_url");

                    b.Property<string>("Bwh")
                        .HasColumnType("TEXT")
                        .HasColumnName("bwh");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<string>("InfoUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("info_url");

                    b.Property<int?>("IsLike")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_like");

                    b.Property<int?>("IsWoman")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_woman");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrifilePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("prifile_path");

                    b.Property<string>("WorkTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("work_time");

                    b.Property<int?>("WorksCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("works_count");

                    b.HasKey("Id");

                    b.ToTable("ActorInfo");
                });

            modelBuilder.Entity("DataAccess.Models.ActorName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Name");

                    b.ToTable("Actor_Names");
                });

            modelBuilder.Entity("DataAccess.Models.ActorVideo", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("actor_id");

                    b.Property<string>("VideoName")
                        .HasColumnType("TEXT")
                        .HasColumnName("video_name");

                    b.HasKey("ActorId", "VideoName");

                    b.ToTable("Actor_Video");
                });

            modelBuilder.Entity("DataAccess.Models.Bwh", b =>
                {
                    b.Property<string>("Bwh1")
                        .HasColumnType("TEXT")
                        .HasColumnName("bwh");

                    b.Property<int?>("Bust")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bust");

                    b.Property<int?>("Hips")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hips");

                    b.Property<int?>("Waist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("waist");

                    b.HasKey("Bwh1");

                    b.ToTable("bwh");
                });

            modelBuilder.Entity("DataAccess.Models.DownHistory", b =>
                {
                    b.Property<string>("FilePickcode")
                        .HasColumnType("TEXT")
                        .HasColumnName("file_pickcode");

                    b.Property<string>("Ua")
                        .HasColumnType("TEXT")
                        .HasColumnName("ua");

                    b.Property<int?>("AddTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("add_time");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<string>("TrueUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("true_url");

                    b.HasKey("FilePickcode", "Ua");

                    b.ToTable("DownHistory");
                });

            modelBuilder.Entity("DataAccess.Models.FailListIslikeLooklater", b =>
                {
                    b.Property<string>("Pc")
                        .HasColumnType("TEXT")
                        .HasColumnName("pc");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("image_path");

                    b.Property<int?>("IsLike")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_like");

                    b.Property<int?>("LookLater")
                        .HasColumnType("INTEGER")
                        .HasColumnName("look_later");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("score");

                    b.HasKey("Pc");

                    b.ToTable("FailList_islike_looklater");
                });

            modelBuilder.Entity("DataAccess.Models.FileToInfo", b =>
                {
                    b.Property<string>("FilePickcode")
                        .HasColumnType("TEXT")
                        .HasColumnName("file_pickcode");

                    b.Property<int?>("Issuccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("issuccess");

                    b.Property<string>("Truename")
                        .HasColumnType("TEXT")
                        .HasColumnName("truename");

                    b.HasKey("FilePickcode");

                    b.ToTable("FileToInfo");
                });

            modelBuilder.Entity("DataAccess.Models.FilesInfo", b =>
                {
                    b.Property<string>("Pc")
                        .HasColumnType("TEXT")
                        .HasColumnName("pc");

                    b.Property<int?>("Aid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("aid");

                    b.Property<int?>("C")
                        .HasColumnType("INTEGER")
                        .HasColumnName("c");

                    b.Property<string>("Cid")
                        .HasColumnType("TEXT")
                        .HasColumnName("cid");

                    b.Property<int?>("CurrentTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_time");

                    b.Property<int?>("D")
                        .HasColumnType("INTEGER")
                        .HasColumnName("d");

                    b.Property<string>("E")
                        .HasColumnType("TEXT")
                        .HasColumnName("e");

                    b.Property<string>("Fdes")
                        .HasColumnType("TEXT")
                        .HasColumnName("fdes");

                    b.Property<string>("Fid")
                        .HasColumnType("TEXT")
                        .HasColumnName("fid");

                    b.Property<int?>("Fvs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fvs");

                    b.Property<int?>("Hdf")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hdf");

                    b.Property<string>("Ico")
                        .HasColumnType("TEXT")
                        .HasColumnName("ico");

                    b.Property<int?>("Iv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iv");

                    b.Property<string>("LastTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_time");

                    b.Property<int?>("M")
                        .HasColumnType("INTEGER")
                        .HasColumnName("m");

                    b.Property<string>("N")
                        .HasColumnType("TEXT")
                        .HasColumnName("n");

                    b.Property<int?>("P")
                        .HasColumnType("INTEGER")
                        .HasColumnName("p");

                    b.Property<string>("Pid")
                        .HasColumnType("TEXT")
                        .HasColumnName("pid");

                    b.Property<double?>("PlayLong")
                        .HasColumnType("REAL")
                        .HasColumnName("play_long");

                    b.Property<int?>("PlayedEnd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("played_end");

                    b.Property<string>("Pt")
                        .HasColumnType("TEXT")
                        .HasColumnName("pt");

                    b.Property<int?>("Q")
                        .HasColumnType("INTEGER")
                        .HasColumnName("q");

                    b.Property<int?>("S")
                        .HasColumnType("INTEGER")
                        .HasColumnName("s");

                    b.Property<int?>("Sh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sh");

                    b.Property<string>("Sha")
                        .HasColumnType("TEXT")
                        .HasColumnName("sha");

                    b.Property<int?>("Sta")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sta");

                    b.Property<string>("T")
                        .HasColumnType("TEXT")
                        .HasColumnName("t");

                    b.Property<int?>("Te")
                        .HasColumnType("INTEGER")
                        .HasColumnName("te");

                    b.Property<int?>("Tp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tp");

                    b.Property<string>("U")
                        .HasColumnType("TEXT")
                        .HasColumnName("u");

                    b.Property<int?>("Uid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("uid");

                    b.Property<int?>("Vdi")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vdi");

                    b.HasKey("Pc");

                    b.ToTable("FilesInfo");
                });

            modelBuilder.Entity("DataAccess.Models.IsWm", b =>
                {
                    b.Property<string>("Truename")
                        .HasColumnType("TEXT")
                        .HasColumnName("truename");

                    b.Property<int?>("IsWm1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_wm");

                    b.HasKey("Truename");

                    b.ToTable("Is_Wm");
                });

            modelBuilder.Entity("DataAccess.Models.ProducerInfo", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IsWm")
                        .HasColumnType("is_wm")
                        .HasColumnName("is_wm");

                    b.HasKey("Name");

                    b.ToTable("ProducerInfo");
                });

            modelBuilder.Entity("DataAccess.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Keyword")
                        .HasColumnType("TEXT NO")
                        .HasColumnName("keyword");

                    b.HasKey("Id");

                    b.HasIndex("Keyword")
                        .IsUnique();

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("DataAccess.Models.SpiderLog", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_id");

                    b.Property<string>("Done")
                        .HasColumnType("TEXT")
                        .HasColumnName("done");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnName("time");

                    b.HasKey("TaskId");

                    b.ToTable("SpiderLog");
                });

            modelBuilder.Entity("DataAccess.Models.SpiderTask", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avmoo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avsox")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bus")
                        .HasColumnType("TEXT")
                        .HasColumnName("bus");

                    b.Property<string>("Db")
                        .HasColumnType("TEXT")
                        .HasColumnName("db");

                    b.Property<int?>("Done")
                        .HasColumnType("INTEGER")
                        .HasColumnName("done");

                    b.Property<string>("Fc")
                        .HasColumnType("TEXT")
                        .HasColumnName("fc");

                    b.Property<string>("Jav321")
                        .HasColumnType("TEXT");

                    b.Property<string>("Libre")
                        .HasColumnType("TEXT")
                        .HasColumnName("libre");

                    b.Property<int?>("TadkId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tadk_id");

                    b.HasKey("Name");

                    b.ToTable("SpiderTask");
                });

            modelBuilder.Entity("DataAccess.Models.VideoInfo", b =>
                {
                    b.Property<string>("Truename")
                        .HasColumnType("TEXT")
                        .HasColumnName("truename");

                    b.Property<string>("Actor")
                        .HasColumnType("TEXT")
                        .HasColumnName("actor");

                    b.Property<int?>("Addtime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("addtime");

                    b.Property<string>("Busurl")
                        .HasColumnType("TEXT")
                        .HasColumnName("busurl");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT")
                        .HasColumnName("director");

                    b.Property<string>("Imagepath")
                        .HasColumnType("TEXT")
                        .HasColumnName("imagepath");

                    b.Property<string>("Imageurl")
                        .HasColumnType("TEXT")
                        .HasColumnName("imageurl");

                    b.Property<int?>("IsLike")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_like");

                    b.Property<string>("Lengthtime")
                        .HasColumnType("TEXT")
                        .HasColumnName("lengthtime");

                    b.Property<int?>("LookLater")
                        .HasColumnType("INTEGER")
                        .HasColumnName("look_later");

                    b.Property<string>("Producer")
                        .HasColumnType("TEXT")
                        .HasColumnName("producer");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT")
                        .HasColumnName("publisher");

                    b.Property<string>("Releasetime")
                        .HasColumnType("TEXT")
                        .HasColumnName("releasetime");

                    b.Property<string>("SampleImageList")
                        .HasColumnType("TEXT")
                        .HasColumnName("sampleImageList");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("score");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT")
                        .HasColumnName("series");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Truename");

                    b.ToTable("VideoInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
