# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build WinUI3 App

on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
  workflow_dispatch:
   inputs:
      version: 
        description: '版本号'
        required: true
        default: '0.0.0.0'

jobs:

  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x86,x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Display
      Project_Directory: Display
#      Version: '0.${{ github.run_number }}.${{ github.run_attempt }}.0'
      Version: ${{github.event.inputs.version}}
      Configuration: ${{ matrix.configuration }}
      Platform: ${{ matrix.platform }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: File Regex Replace
      uses: mingjun97/file-regex-replace@v1
      with:
        regex: 'Version="([0-9\.]*)"'
        replacement: 'Version="${{ env.version }}"'
        include: Package.appxmanifest


    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2


    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath Display_TemporaryKey.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=Display_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:DefaultLanguage=zh-cn
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\

    # Remove the pfx
 #   - name: Remove the pfx
 #     run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: Display/Packages/**/Display*.msix

    - name: Create ZIP of $env.platform app
      run: Compress-Archive Display/Packages/Display*_$env.platform_Test 'Display_$env.version_$env.platform.zip'

    - name: Upload ZIP of $env.platform app
      uses: actions/upload-artifact@v2
      with:
        name: 'Display_${{ env.version }}_${{ env.platform }}.zip'
        path: 'Display_${{ env.version }}_${{ env.platform }}.zip'
        
#    # Create the unpackaged app
#    - name: Build unpackaged app
#      run: msbuild $env:Solution_Name /t:Publish /p:WindowsPackageType=None /p:Configuration=$env:Configuration /p:Platform=x64
#      env:
#        Configuration: ${{ env.configuration }}
#        
#    - name: Create ZIP of unpackaged app
#      run: Compress-Archive Display/bin/x64/Release/net6.0-windows10.0.19041.0/publish/* 'Display-unpackaged-${{ env.version }}.zip'
#        
#    - name: Upload unpackaged app
#      uses: actions/upload-artifact@v2
#      with:
#        name: 'Unpackaged app'
#        path: "Display-unpackaged-${{ env.version }}.zip"

    - name: Create GH release
      if: github.ref_name == 'main'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        name: 'v${{ env.version }}'
        tag_name: 'v${{ env.version }}'
        body: '> 初次安装请下载对应框架的zip压缩包（含安装证书、安装脚本），升级或重装仅需下载对应框架的msix包'
        files: |
          Display/Packages/**/Display*.msix
          Display_*.zip
        fail_on_unmatched_files: true
